# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-05-31 02:02
from __future__ import unicode_literals

import blog.utils
import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import image_cropping.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='first name')),
                ('last_name', models.CharField(max_length=50, verbose_name='last name')),
                ('slug', models.SlugField(editable=False, unique=True, verbose_name='slug')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, null=True, verbose_name='updated on')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'ordering': ['first_name'],
                'verbose_name': 'author',
                'verbose_name_plural': 'authors',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=blog.utils.blog_upload_to, verbose_name='image')),
                ('image_cropping', image_cropping.fields.ImageRatioField(b'image', '0x0', adapt_rotation=False, allow_fullsize=False, free_crop=True, help_text=None, hide_image_field=False, size_warning=False, verbose_name=b'free crop')),
                ('image_cropping_square', image_cropping.fields.ImageRatioField(b'image', '900x900', adapt_rotation=False, allow_fullsize=False, free_crop=False, help_text=None, hide_image_field=False, size_warning=False, verbose_name=b'900x900')),
                ('ordering', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['ordering'],
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abstract', models.TextField(blank=True, null=True, verbose_name='abstract')),
                ('abstract_fr', models.TextField(blank=True, null=True, verbose_name='abstract')),
                ('abstract_en', models.TextField(blank=True, null=True, verbose_name='abstract')),
                ('abstract_es', models.TextField(blank=True, null=True, verbose_name='abstract')),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='content')),
                ('content_fr', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='content')),
                ('content_en', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='content')),
                ('content_es', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='content')),
                ('published_date', models.DateField(verbose_name='published date')),
                ('slug', models.SlugField(editable=False, unique=True, verbose_name='slug')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='title')),
                ('title_fr', models.CharField(blank=True, max_length=200, null=True, verbose_name='title')),
                ('title_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='title')),
                ('title_es', models.CharField(blank=True, max_length=200, null=True, verbose_name='title')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, null=True, verbose_name='updated on')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_by_author', to='blog.Author', verbose_name='author')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('credit_photo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='post_by_credit_photo', to='blog.Author', verbose_name='credit photo')),
                ('sites', models.ManyToManyField(to='sites.Site', verbose_name='sites')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='updated by')),
            ],
            options={
                'ordering': ['-published_date'],
                'verbose_name': 'post',
                'verbose_name_plural': 'posts',
            },
        ),
        migrations.AddField(
            model_name='image',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Post', verbose_name='post'),
        ),
        migrations.AlterUniqueTogether(
            name='author',
            unique_together=set([('first_name', 'last_name')]),
        ),
    ]
