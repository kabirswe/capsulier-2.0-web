# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-05-31 02:02
from __future__ import unicode_literals

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion
import geoposition.fields
import image_cropping.fields
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('html', models.CharField(blank=True, max_length=80, verbose_name='html')),
                ('name', models.CharField(max_length=80, verbose_name='name')),
                ('name_fr', models.CharField(max_length=80, null=True, verbose_name='name')),
                ('name_en', models.CharField(max_length=80, null=True, verbose_name='name')),
                ('name_es', models.CharField(max_length=80, null=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=206, unique=True, verbose_name='slug')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, null=True, verbose_name='updated on')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Static Page',
                'verbose_name_plural': 'Static Pages',
            },
        ),
        migrations.CreateModel(
            name='SEO',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The title of the page.', max_length=60, verbose_name='title')),
                ('title_fr', models.CharField(help_text='The title of the page.', max_length=60, null=True, verbose_name='title')),
                ('title_en', models.CharField(help_text='The title of the page.', max_length=60, null=True, verbose_name='title')),
                ('title_es', models.CharField(help_text='The title of the page.', max_length=60, null=True, verbose_name='title')),
                ('description', models.TextField(blank=True, help_text='A short description or summary of the page. (max 160 characters)', max_length=160, verbose_name='description')),
                ('description_fr', models.TextField(blank=True, help_text='A short description or summary of the page. (max 160 characters)', max_length=160, null=True, verbose_name='description')),
                ('description_en', models.TextField(blank=True, help_text='A short description or summary of the page. (max 160 characters)', max_length=160, null=True, verbose_name='description')),
                ('description_es', models.TextField(blank=True, help_text='A short description or summary of the page. (max 160 characters)', max_length=160, null=True, verbose_name='description')),
                ('keywords', models.TextField(blank=True, help_text='A series of keywords you deem relevant to the page.', verbose_name='keywords')),
                ('keywords_fr', models.TextField(blank=True, help_text='A series of keywords you deem relevant to the page.', null=True, verbose_name='keywords')),
                ('keywords_en', models.TextField(blank=True, help_text='A series of keywords you deem relevant to the page.', null=True, verbose_name='keywords')),
                ('keywords_es', models.TextField(blank=True, help_text='A series of keywords you deem relevant to the page.', null=True, verbose_name='keywords')),
                ('resource_type', models.CharField(blank=True, help_text='Defines the type of webpage.', max_length=120, verbose_name='Resource-type')),
                ('image', models.ImageField(blank=True, help_text='It should be at least 600x315 pixels, but 1200x630 or larger is preferred (up to 5MB).', upload_to=main.models.file_upload_to, verbose_name='image')),
                ('image_cropping', image_cropping.fields.ImageRatioField('image', '1200x630', adapt_rotation=False, allow_fullsize=False, free_crop=False, help_text=None, hide_image_field=False, size_warning=False, verbose_name='image cropping')),
                ('fb_app_id', models.CharField(blank=True, max_length=60, verbose_name='fb:app_id')),
                ('site_name', models.CharField(blank=True, help_text='The name which should be displayed for the overall site.', max_length=60, verbose_name='og:site_name')),
                ('twitter_site', models.CharField(blank=True, help_text='@username of website.', max_length=60, verbose_name='twitter:site')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, null=True, verbose_name='updated on')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Page', verbose_name='page')),
            ],
            options={
                'ordering': ['page'],
                'verbose_name': 'SEO',
                'verbose_name_plural': 'SEO',
            },
        ),
        migrations.CreateModel(
            name='SiteExtra',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_analytics_id', models.CharField(blank=True, max_length=40, verbose_name='google analytics id')),
                ('mailchimp_api_key', models.CharField(blank=True, max_length=40, verbose_name='mailchimp api key')),
                ('mailchimp_list_id', models.CharField(blank=True, max_length=40, verbose_name='mailchimp list id')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, null=True, verbose_name='updated on')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sites.Site', verbose_name='site')),
            ],
            options={
                'ordering': ['site'],
                'verbose_name': 'Site Extra',
                'verbose_name_plural': 'Site Extra',
            },
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(default=0)),
                ('t_CharField', models.CharField(blank=True, max_length=120, verbose_name='CharField')),
                ('t_CharField_fr', models.CharField(blank=True, max_length=120, null=True, verbose_name='CharField')),
                ('t_CharField_en', models.CharField(blank=True, max_length=120, null=True, verbose_name='CharField')),
                ('t_CharField_es', models.CharField(blank=True, max_length=120, null=True, verbose_name='CharField')),
                ('t_CharField_boolean', models.BooleanField(default=False, verbose_name='CharField boolean')),
                ('t_CharField_slug', models.SlugField(blank=True, max_length=120, verbose_name='CharField slug')),
                ('t_EmailField', models.EmailField(blank=True, max_length=254, verbose_name='EmailField')),
                ('t_EmailField_boolean', models.BooleanField(default=False, verbose_name='EmailField boolean')),
                ('t_FileField', models.FileField(blank=True, upload_to=main.models.file_upload_to, verbose_name='FileField')),
                ('t_FileField_boolean', models.BooleanField(default=False, verbose_name='FileField boolean')),
                ('t_GeopositionField', geoposition.fields.GeopositionField(blank=True, max_length=42, verbose_name='GeopositionField')),
                ('t_GeopositionField_boolean', models.BooleanField(default=False, verbose_name='GeopositionField boolean')),
                ('t_ImageField', models.ImageField(blank=True, upload_to=main.models.file_upload_to, verbose_name='image')),
                ('t_ImageField_boolean', models.BooleanField(default=False, verbose_name='ImageField boolean')),
                ('t_ImageRatioField_crop', image_cropping.fields.ImageRatioField('t_ImageField', '1600x900', adapt_rotation=False, allow_fullsize=False, free_crop=False, help_text=None, hide_image_field=False, size_warning=False, verbose_name='t ImageRatioField crop')),
                ('t_ImageRatioField_free', image_cropping.fields.ImageRatioField('t_ImageField', '0x0', adapt_rotation=False, allow_fullsize=False, free_crop=True, help_text=None, hide_image_field=False, size_warning=False, verbose_name='t ImageRatioField free')),
                ('t_ImageRatioField_square', image_cropping.fields.ImageRatioField('t_ImageField', '1600x1600', adapt_rotation=False, allow_fullsize=False, free_crop=False, help_text=None, hide_image_field=False, size_warning=False, verbose_name='t ImageRatioField square')),
                ('t_RichTextField', ckeditor.fields.RichTextField(blank=True, verbose_name='RichTextField')),
                ('t_RichTextField_fr', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='RichTextField')),
                ('t_RichTextField_en', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='RichTextField')),
                ('t_RichTextField_es', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='RichTextField')),
                ('t_RichTextField_boolean', models.BooleanField(default=False, verbose_name='RichTextField boolean')),
                ('t_TextField', models.TextField(blank=True, verbose_name='TextField')),
                ('t_TextField_fr', models.TextField(blank=True, null=True, verbose_name='TextField')),
                ('t_TextField_en', models.TextField(blank=True, null=True, verbose_name='TextField')),
                ('t_TextField_es', models.TextField(blank=True, null=True, verbose_name='TextField')),
                ('t_TextField_boolean', models.BooleanField(default=False, verbose_name='TextField boolean')),
                ('t_URLField', models.URLField(blank=True, verbose_name='URLField')),
                ('t_URLField_boolean', models.BooleanField(default=False, verbose_name='URLField boolean')),
                ('t_VideoField_boolean', models.BooleanField(default=False, verbose_name='VideoField boolean')),
                ('t_VideoField_cover', models.ImageField(blank=True, upload_to=main.models.file_upload_to, verbose_name='VideoField cover')),
                ('t_VideoField_cover_cropping', image_cropping.fields.ImageRatioField('t_VideoField_cover', '0x0', adapt_rotation=False, allow_fullsize=False, free_crop=True, help_text=None, hide_image_field=False, size_warning=False, verbose_name='t VideoField cover cropping')),
                ('t_VideoField_mp4', models.FileField(blank=True, upload_to=main.models.file_upload_to, verbose_name='VideoField mp4')),
                ('t_VideoField_ogg', models.FileField(blank=True, upload_to=main.models.file_upload_to, verbose_name='VideoField ogg')),
                ('t_VideoField_swf', models.FileField(blank=True, upload_to=main.models.file_upload_to, verbose_name='VideoField swf')),
                ('t_VideoField_webm', models.FileField(blank=True, upload_to=main.models.file_upload_to, verbose_name='VideoField webm')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, null=True, verbose_name='updated on')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Page', verbose_name='page')),
            ],
            options={
                'ordering': ['position'],
                'verbose_name': 'text',
                'verbose_name_plural': 'texts',
            },
        ),
    ]
